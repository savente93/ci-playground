
name: Finalise a new release

on:
  pull_request_review:
    types: [submitted]

jobs:
  publish-docker:
    if: github.event.review.state == 'APPROVED'
    name: Finalise docker release
    runs-on: ubuntu-24.04 # latest LTS release
    concurrency:
      group: NEW_RELEASE_DOCKER
      cancel-in-progress: false # don't abort while we might be creating a PR or something
    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - uses: actions/download-artifact@v4
        with:
          name: hydromt-docker-image
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.TEST_DOCKERHUB_USERNAME }}
          password: ${{ secrets.TEST_DOCKERHUB_TOKEN }}
      
      - name: Build and push ${{ matrix.flavour }} image
        uses: docker/build-push-action@v4
        with:
          context: .
          target: ${{ matrix.flavour }} 
          push:  true
          tags: deltares/hydromt:${{ env.version }}-${{ matrix.flavour }}

      - name: Build and push latest image
        if: matrix.flavour == 'slim'
        uses: docker/build-push-action@v4
        with:
          context: .
          target: ${{ matrix.flavour }} 
          push:  true
          tags: deltares/hydromt:${{ env.version }}, deltares/hydromt:latest
  
  upload-to-pypi:
    if: ${{ github.event_name == 'release' && !github.event.act  }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: releases
          path: dist
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.5.1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          verbose: true

      # - name: setup release PR
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #   run: |

      #     set -e
      #     PR_ID=$(gh pr list --state "open" --author "app/github-actions" --search "release"  --json "number" --jq '. | first | .number')
      #     gh pr merge $PR_ID
      #     git pull
      #     git checkout main
      #     export NEW_VERSION=$(grep "version" hydromt/__init__.py | cut -d= -f 2 | tr -d "\" ")
      #     git tag v$NEW_VERSION

      #     # TODO: 
      #     # - create tag 
      #     # - publish to pypi, docker, conda
      #     # - create gh release
      #     # - publish docs
      #     # - make new commit with new `Unreleased` header in changelog, and set version back to dev 
